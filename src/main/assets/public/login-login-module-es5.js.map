{"version":3,"sources":["webpack:///src/app/login/login.page.html","webpack:///src/app/login/login-routing.module.ts","webpack:///src/app/login/login.module.ts","webpack:///src/app/login/login.page.scss","webpack:///src/app/login/login.page.ts"],"names":["routes","path","component","LoginPageRoutingModule","imports","forChild","exports","LoginPageModule","declarations","LoginPage","auth","router","route","alertController","form","email","required","password","minLength","queryParams","subscribe","params","console","log","aSub","unsubscribe","disable","login","value","navigate","error","presentAlert","enable","create","cssClass","header","subHeader","message","buttons","alert","present","selector","template"],"mappings":"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","file":"login-login-module-es5.js","sourcesContent":["export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-title>Вход</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <ion-card>\\r\\n    <form\\r\\n      class=\\\"card\\\"\\r\\n      [formGroup]=\\\"form\\\"\\r\\n      (ngSubmit)=\\\"onSubmit()\\\"\\r\\n    >\\r\\n    <div class=\\\"card-content\\\">\\r\\n      <ion-card-header>\\r\\n        <ion-card-subtitle>CRM</ion-card-subtitle>\\r\\n        <ion-card-title>Вход в систему</ion-card-title>\\r\\n      </ion-card-header>\\r\\n      <div class=\\\"input-field\\\">\\r\\n        <ion-item>\\r\\n          <ion-label position=\\\"floating\\\">E-mail</ion-label>\\r\\n          <ion-input\\r\\n            formControlName=\\\"email\\\"\\r\\n            id=\\\"email\\\"\\r\\n            type=\\\"email\\\">\\r\\n          </ion-input>\\r\\n        </ion-item>\\r\\n        <span\\r\\n          class=\\\"helper-text red-text\\\"\\r\\n          *ngIf=\\\"form.get('email').invalid && form.get('email').touched\\\"\\r\\n        >\\r\\n          <span *ngIf=\\\"form.get('email').errors['required']\\\">Email не должен быть пустым</span>\\r\\n          <span *ngIf=\\\"form.get('email').errors['email']\\\">Введите корректный email адрес</span>\\r\\n        </span>\\r\\n      </div>\\r\\n      <div class=\\\"input-field\\\">\\r\\n        <ion-item>\\r\\n          <ion-label position=\\\"floating\\\">Пароль</ion-label>\\r\\n          <ion-input\\r\\n            formControlName=\\\"password\\\"\\r\\n            type=\\\"password\\\">\\r\\n          </ion-input>\\r\\n        </ion-item>\\r\\n        <span\\r\\n          class=\\\"helper-text red-text\\\"\\r\\n          *ngIf=\\\"form.get('password').invalid && form.get('password').touched\\\"\\r\\n        >\\r\\n          <span *ngIf=\\\"form.get('password').errors['required']\\\">Пароль не должен быть пустым</span>\\r\\n          <span *ngIf=\\\"form.get('password').errors['minlength'] && form.get('password').errors['minlength']['requiredLength']\\\">\\r\\n            Пароль должен быть больше {{form.get('password').errors['minlength']['requiredLength']}} символов.\\r\\n            Сейчас {{form.get('password').errors['minlength']['actualLength']}}\\r\\n          </span>\\r\\n        </span>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"card-action\\\">\\r\\n      <ion-button\\r\\n        type=\\\"submit\\\"\\r\\n        class=\\\"ion-margin\\\"\\r\\n        [disabled]=\\\"form.invalid || form.disabled\\\"\\r\\n      >\\r\\n        Войти\\r\\n      </ion-button>\\r\\n    </div>\\r\\n  </form>\\r\\n  </ion-card>\\r\\n  <ion-button\\r\\n        type=\\\"submit\\\"\\r\\n        class=\\\"ion-margin\\\"\\r\\n        routerLink=\\\"/reg\\\"\\r\\n        expand=\\\"block\\\"\\r\\n        color=\\\"dark\\\"\\r\\n  >\\r\\n        Регистрация\\r\\n  </ion-button>\\r\\n</ion-content>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LoginPage } from './login.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class LoginPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { LoginPageRoutingModule } from './login-routing.module';\r\n\r\nimport { LoginPage } from './login.page';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    LoginPageRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: [LoginPage]\r\n})\r\nexport class LoginPageModule {}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvZ2luL2xvZ2luLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute, Params } from '@angular/router';\r\nimport { AlertController } from '@ionic/angular';\r\nimport { Subscription } from 'rxjs';\r\nimport { MaterialService } from '../shared/classes/material.service';\r\nimport { AuthService } from '../shared/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.page.html',\r\n  styleUrls: ['./login.page.scss'],\r\n})\r\nexport class LoginPage implements OnInit {\r\n  form: FormGroup\r\n  aSub: Subscription\r\n\r\n  constructor(private auth: AuthService,\r\n              private router: Router,\r\n              private route: ActivatedRoute,\r\n              public alertController: AlertController) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form = new FormGroup({\r\n      email: new FormControl(null, [Validators.required, Validators.email]),\r\n      password: new FormControl(null, [Validators.required, Validators.minLength(6)])\r\n    })\r\n\r\n    this.route.queryParams.subscribe((params: Params) => {\r\n      if (params['registered']) {\r\n        console.log('Теперь вы можете зайти в систему используя свои данные')\r\n      } else if (params['accessDenied']) {\r\n        console.log('Для начала авторизуйтесь в системе')\r\n      }\r\n    })\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.aSub) {\r\n      this.aSub.unsubscribe()\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    this.form.disable()\r\n\r\n    this.aSub = this.auth.login(this.form.value).subscribe(\r\n      () => this.router.navigate(['/dash/history']),\r\n      error => {\r\n        this.presentAlert()\r\n        this.form.enable()\r\n      }\r\n    )\r\n  }\r\n\r\n  async presentAlert() {\r\n    const alert = await this.alertController.create({\r\n      cssClass: 'my-custom-class',\r\n      header: 'Ошибка',\r\n      subHeader: '',\r\n      message: 'Неверный логин или пароль.',\r\n      buttons: ['OK']\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n}\r\n"]}